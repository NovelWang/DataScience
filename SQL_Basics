----------------------------------------------------------- Basic SQL Syntax -----------------------------------------------

1. Basic syntax
SELECT (CASE ... WHEN... THEN... END)
FROM
JOIN 
ON 
WHERE 
GROUP BY 
HAVING 
ORDER BY 

Note:
1) Having is a clean way to filter aggregrated columns
2) There are 5 aggregrate functions: max, min, count, sum, avg
COUNT (*) = COUNT(1) -- including null values
COUNT(col_name) ---- ignoring null values
AVG(col_name) ---- ignoring null values
3) Distinct can be useful but could be slow to run
4) CASE WHEN is often used when counting multiple conditions for a certain column
5) different types of joins
A. Inner join
B. Left outer join
C. Right outer join
D. Full outer join
E. Cross join  (Return the cartesian product of two tables and does not need a on condition)



2. SQL logical operators
LIKE
ILIKE
IN
BETWEEN  AND
IS NULL
AND
OR NOT

3. CAST a column's data type
col_name::integer

eg. 
SELECT funded_at::timestamp + INTERVAL '1 month' AS one_month_after_funded
FROM table1
WHERE funded_at IS NOT NULL


4. More about data wrangling with SQL: please see Mode SQL Analytics




-----------------------------------------------------Interview Practice Questions ------------------------------------------


1. USE SQL to create a histogram (distribution of a column)

First, we need to define the # of bins and calculate the min, max, and the size of bucket:
For example, if we define the # of bins to be 10:

SELECT (max(open) - min(open)+1)/10.00 as bucket_size, max(open), min(open)
FROM tutorial.aapl_historical_stock_price

OUTPUT:
70.241  702.41  0

Then we need to assign each row to the bucket from 0 to 9 using floor().
SELECT floor(open-0)/70.241 as bucket, COUNT(*) as num_of_observations
FROM tutorial.aapl_historical_stock_price
GROUP BY bucket
ORDER BY bucket



2. Use SQL to find the median.
1) if using window function -- find the 50th percentile
SELECT  percentile_cont(0.5) WITHIN GROUP (ORDER BY open) as median
FROM tutorial.aapl_historical_stock_price


2) if using window function rank()
SELECT max(rank_open)
FROM 
      (SELECT id, open, CASE WHEN open is NULL THEN NULL ELSE RANK() OVER (ORDER BY open) END as rank_open
      FROM tutorial.aapl_historical_stock_price
      WHERE open IS NOT NULL
      ORDER BY 3 DESC) sub

--Note that RANK() will count NULL as unlimitedly large.


3) if using self-join
SELECT *
FROM
      (SELECT a.open, COUNT(b.open) as rank_open
      FROM tutorial.aapl_historical_stock_price a
      JOIN tutorial.aapl_historical_stock_price b
      ON b.open<a.open OR (a.open = b.open AND b.id <= a.id)
      GROUP BY a.open, a.id
      ORDER BY rank_open DESC) sub
WHERE rank_open = 3542/2


3. Check the questions here:
https://github.com/joshualande/joshualande.github.io/blob/master/_drafts/2014-02-04-challening-sql-queries.md
1). For each region, find the minimum surface area for countries that are in the top five for best life expectancy.

     SELECT min(b.surface_area),b.region
     FROM
            (SELECT code
            FROM country
            ORDER BY life_exp DESC LIMIT 5) a
      JOIN country b
      On a.code = b.code
      GROUP by b.region

2). Find the top ten countries with the most languages. 
Return the full country names as well as the number of shared languages.
Sort in descending order by the number of shared lanuages.

SELECT sub.country_code, c.name, sub.num_lan
FROM
      (SELECT country_code, COUNT(language) as num_lan
      FROM country_language
      GROUP BY country_code
      ORDER BY num_lan DESC
      LIMIT 10) sub
JOIN country c
ON sub.country_code = c.code
ORDER BY sub.num_lan DESC

3). Do a histogram on life_expectancy
SELECT floor(life_expectancy/10) as bin_seq, COUNT(code)
FROM country
GROUP BY 1



4. Check the questions here:
https://github.com/joshualande/joshualande.github.io/blob/master/_drafts/2014-06-07-analytics-sql.md

For each user in the last month, compute the number of days that the user logged in.
Next, for each rolling 30 day period, compute the number of login days.

SELECT a.benchmark, b.user_id, COUNT(DISTINCT b.date_id)
FROM
    (SELECT DISTINCT date_id as benchmark
    FROM engagement) a
JOIN engagement b
ON b.date_id< a. benchmark AND b.date_id >= a.benchmark - interval '1 month'
WHERE action_id = 'profile'
GROUP BY 1, 2

OR using window function:

SELECT user_id, day, 
COUNT(day) OVER (PARTITION BY user_id ORDER BY day ROWS BETWEEN 10 preceding AND current row) as num_login
FROM
(SELECT DISTINCT DATE_TRUNC('day', occurred_at) as day, user_id
FROM tutorial.yammer_events
ORDER BY 1) sub


5. Stanford Lagunita --highschooler, friend, likes
PART I. SOCIAL NETWORK QUERIES

Q1. Find the names of all students who are friends with someone named Gabriel. (EASY)
SELECT h1.name
FROM friend f
JOIN highschooler h1, highschooler h2
ON f.ID1 = h1.ID
AND f.ID2 = h2.ID
WHERE h2.name = 'Gabriel'


Q2. For every student who likes someone 2 or more grades younger than themselves,
return that student's name and grade, and the name and grade of the student they like. (EASY)
SELECT h1.name, h1.grade, h2.name, h2.grade
FROM likes l
JOIN highschooler h1, highschooler h2
ON l.ID1 = h1.ID AND l.ID2 = h2.ID
WHERE h1.grade - h2.grade >=2



Q3. For every pair of students who both like each other, 
return the name and grade of both students. 
Include each pair only once, with the two names in alphabetical order. (MEDIUM)

SELECT DISTINCT h1.name, h1.grade, h2.name, h2.grade
FROM likes l1, highschooler h1
JOIN likes l2, highschooler h2
ON l1.ID1 = l2.ID2
AND l1.ID2 = l2.ID1
AND l1.ID1 = h1.ID
AND l1.ID2 = h2.ID
AND h1.name< h2.name
ORDER BY h1.name

Q4. Find all students who do not appear in the Likes table (as a student who likes or is liked) 
and return their names and grades. Sort by grade, then by name within each grade. (EASY)
SELECT h.name, h.grade
FROM highschooler h
LEFT JOIN likes l
ON h.ID = l.ID1
OR h.ID = l.ID2
WHERE l.ID1 IS NULL AND l.ID2 IS NULL
ORDER BY h.grade, h.name

Q5. For every situation where student A likes student B, but we have no information about whom B likes 
(that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades. (EASY)
SELECT h1.name, h1.grade, h2.name, h2.grade
FROM
(SELECT l1.ID1, l1.ID2
FROM likes l1
LEFT JOIN likes l2
ON l1.ID2 = l2.ID1
WHERE l2.ID1 IS NULL) sub
JOIN highschooler h1, highschooler h2
ON sub.ID1 = h1.ID AND sub.ID2 = h2.ID

Q6. Find names and grades of students who only have friends in the same grade.
Return the result sorted by grade, then by name within each grade. (MEDIUM)

SELECT h.name, h.grade
FROM
      (SELECT DISTINCT f.ID1
      FROM friend f
      WHERE f.ID1 NOT IN
                        (SELECT DISTINCT f.ID1
                        FROM friend f
                        JOIN highschooler h1, highschooler h2
                        ON f.ID1 = h1.ID AND f.ID2 = h2.ID 
                        WHERE h1.grade!=h2.grade)
      ) sub
JOIN highschooler h
ON sub.ID1 = h.ID
ORDER BY h.grade, h.name




Q7. For each student A who likes a student B where the two are not friends,
find if they have a friend C in common (who can introduce them!). 
For all such trios, return the name and grade of A, B, and C. (medium)

        SELECT h1.name, h1.grade, h2.name, h2.grade,h3.name, h3.grade
        FROM
        (SELECT DISTINCT a.*
        FROM
        (SELECT l.ID1 as A, f1.ID2 as A_f, l.ID2 as B, f2.ID2 as B_f
        FROM likes l
        JOIN friend f1, friend f2
        ON l.ID1 = f1.ID1 AND l.ID2 = f2.ID1
        WHERE A_f = B_f) a
        LEFT JOIN friend f
        ON a.A = f.ID1 AND a.B = f.ID2
        WHERE f.ID1 IS NULL) sub 
        JOIN highschooler h1, highschooler h2, highschooler h3
        ON sub.A = h1.ID AND sub.B = h2.ID AND sub.B_f = h3.ID

 
Q8. Find the difference between the number of students in the school and the number of different first names. (EASY)
SELECT COUNT(*) - COUNT(DISTINCT name)
FROM highschooler


Q9. Find the name and grade of all students who are liked by more than one other student. 

SELECT h.name, h.grade
(SELECT ID2, COUNT(ID1) as num_fans
FROM likes
GROUP BY ID2
HAVING num_fans >=2) sub
JOIN highschooler h
ON sub.ID2 = h.ID


PART II. SOCIAL NETWORK QUERIES EXTRAS

Q1. For every situation where student A likes student B, but student B likes a different student C, 
return the names and grades of A, B, and C. (Easy)

SELECT h1.name,h1.grade,h2.name,h2.grade,h3.name,h3.grade
FROM
(SELECT l1.ID1 as A, l1.ID2 as B, l2.ID2 as C
FROM likes l1
JOIN likes l2
ON l1.ID2  = l2.ID1
WHERE l2.ID2 !=l1.ID1) sub
JOIN highschooler h1, highschooler h2, highschooler h3
ON sub.A = h1.ID AND sub.B = h2.ID AND sub.C = h3.ID


Q2. Find those students for whom all of their friends are in different grades from themselves. 
Return the students' names and grades. (Medium)

Solution 1:
SELECT DISTINCT h.name, h.grade
FROM friend f
JOIN highschooler h
ON f.ID1 = h.ID
WHERE f.ID1 NOT IN
(SELECT a.ID1
FROM
(SELECT f.*, h1.grade AS A_grade, h1.name as A_name, h2.grade as B_grade, h2.name as B_name
FROM friend f
JOIN highschooler h1, highschooler h2
ON f.ID1 = h1.ID AND f.ID2 = h2.ID) a
WHERE A_grade = B_grade)

Solution 2:
SELECT name, grade
FROM highschooler 
WHERE ID IN 
(SELECT f.ID1
FROM highschooler h1, highschooler h2
JOIN friend f
ON h1.ID = f.ID1 
AND h2.ID = f.ID2
GROUP BY f.ID1
HAVING SUM(CASE WHEN h2.grade = h1.grade THEN 1 ELSE 0 END) = 0)

Q3. What is the average number of friends per student? (EASY)

SELECT avg(num_f)
FROM
(SELECT ID1, COUNT(ID2)as num_f
FROM friend 
GROUP BY ID1) sub

Q4. Find the number of students who are either friends with Cassandra 
or are friends of friends of Cassandra. (Medium)

Do not count Cassandra, even though technically she is a friend of a friend. 
(SELECT DISTINCT ID2
FROM friend f
JOIN highschooler h
ON f.ID1 = h.ID
WHERE h.name = 'Cassandra')

UNION

SELECT DISTINCT f2.ID2
FROM friend f1
JOIN friend f2, highschooler h1, highschooler h2
ON f1.ID2 = f2.ID1
AND f1.ID1 = h1.ID
AND f2.ID2 = h2.ID
WHERE h1.name = 'Cassandra' AND h2.name!='Cassandra' 

Q5. Find the name and grade of the student(s) with the greatest number of friends. (Medium)

SELECT name, grade
FROM highschooler 
WHERE ID IN 
(SELECT ID1 AS ID
FROM
(SELECT ID1, COUNT(ID2) AS num_frds
FROM friend
GROUP BY ID1) sub1
WHERE sub1.num_frds = 
        (SELECT MAX(num_frds)
        FROM 
            (SELECT ID1, COUNT(ID2) AS num_frds
             FROM friend
             GROUP BY ID1) sub2))



PART III. SQL Social-Network Modification Exercises

Q2. If two students A and B are friends, and A likes B but not vice-versa, remove the Likes tuple. (Medium)
DELETE FROM likes
WHERE ID1 IN 
(SELECT i.ID1
FROM friend f
JOIN
(SELECT likes.ID1, likes.ID2
FROM likes
LEFT JOIN 
(SELECT l1.ID1, l1.ID2
FROM likes l1
JOIN likes l2
ON l1.ID2 = l2.ID1
AND l2.ID2=l1.ID1) sub
ON likes.ID1 = sub.ID1
AND likes.ID2 = sub.ID2
WHERE sub.ID1 IS NULL) i
ON f.ID1 = i.ID1
AND f.ID2 = i.ID2)

AND ID2 IN 
(SELECT i.ID2
FROM friend f
JOIN
(SELECT likes.ID1, likes.ID2
FROM likes
LEFT JOIN 
(SELECT l1.ID1, l1.ID2
FROM likes l1
JOIN likes l2
ON l1.ID2 = l2.ID1
AND l2.ID2=l1.ID1) sub
ON likes.ID1 = sub.ID1
AND likes.ID2 = sub.ID2
WHERE sub.ID1 IS NULL) i
ON f.ID1 = i.ID1
AND f.ID2 = i.ID2)

Q3. For all cases where A is friends with B, and B is friends with C, 
add a new friendship for the pair A and C. 
Do not add duplicate friendships, friendships that already exist, or friendships with oneself. 
(This one is a bit challenging; congratulations if you get it right.) 

INSERT INTO friend
(SELECT sub.ID1, sub.ID2
FROM
(SELECT f1.ID1 as ID1, f2.ID2 as ID2
FROM friend f1
JOIN friend f2
ON f1.ID2 = f2.ID1
AND f1.ID1 = f2.ID2
WHERE f1.ID1 != f2.ID2) sub
LEFT JOIN friend f
ON sub.ID1 = f.ID1
AND sub.ID2 = f.ID2
WHERE f.ID1 IS NULL)


INSERT INTO friend
SELECT sub.ID1, sub.ID2
FROM (SELECT DISTINCT f1.ID1,f2.ID2
      FROM friend f1
      JOIN friend f2
      ON f2.ID1 = f1.ID2
      AND f2.ID2!= f1.ID1) sub
LEFT JOIN friend f
ON f.ID1 = sub.ID1
AND f.ID2 = sub.ID2
WHERE f.ID1 IS NULL



/* For the following quries, you can run them on SQL MODE ANALYTICS */
6. Pivot a table
--(1)
SELECT user_id, sum(CASE WHEN event_name = 'like_message' THEN num_events ELSE NULL END) AS like_msg,
SUM(CASE WHEN event_name = 'login' THEN num_events ELSE NULL END) AS login,
SUM(CASE WHEN event_name = 'send_message' THEN num_events ELSE NULL END) AS send_msg
FROM
(SELECT user_id, event_name, COUNT(occurred_at) as num_events
FROM tutorial.yammer_events
WHERE event_name='login' or event_name = 'like_message' or event_name = 'send_message'
GROUP BY 1,2
ORDER BY 1,2) sub
GROUP BY 1

--(2) pivot the earthquake table
SELECT *
  FROM tutorial.worldwide_earthquakes

--how to add a column 'year' and a column 'num'
SELECT year
FROM (VALUES (2000),(2001),(2002),(2003),(2004),(2005),(2006),
               (2007),(2008),(2009),(2010),(2011),(2012)) v(year)
               
SELECT day_of_week
FROM (VALUES ('Monday'), ('Tue'), ('Wed')) v(day_of_week)

--create the new table
SELECT magnitude, year, 
CASE WHEN year = '2000' THEN year_2000
     WHEN year = '2001' THEN year_2001
     WHEN year = '2002' THEN year_2002
     WHEN year = '2003' THEN year_2003
     WHEN year = '2004' THEN year_2004
     WHEN year = '2005' THEN year_2005
     WHEN year = '2006' THEN year_2006
     WHEN year = '2007' THEN year_2007
     WHEN year = '2008' THEN year_2008
     WHEN year = '2009' THEN year_2009
     WHEN year = '2010' THEN year_2010
     WHEN year = '2011' THEN year_2011
     WHEN year = '2012' THEN year_2012
     ELSE NULL END AS num_earthquakes
FROM
(SELECT e.*, sub.*
FROM tutorial.worldwide_earthquakes e
CROSS JOIN 
(SELECT year
FROM (VALUES (2000),(2001),(2002),(2003),(2004),(2005),(2006),
               (2007),(2008),(2009),(2010),(2011),(2012)) v(year)) sub) subtable


7. Calculate the # of users using each pair of platforms

SELECT user_id,CASE WHEN platform = 'mac' THEN 1 ELSE 0 END AS mac,
CASE WHEN platform = 'iphone' THEN 1 ELSE 0 END AS iphone,CASE WHEN platform = 'ipad' THEN 1 ELSE 0 END AS ipad
FROM
(SELECT *,
CASE WHEN device = 'iphone 5' THEN 'iphone' WHEN device = 'macbook pro' THEN 'mac' WHEN device LIKE 'ipad%' THEN 'ipad'
ELSE NULL END AS platform
FROM tutorial.yammer_events) sub
WHERE platform IS NOT NULL
               
8. Define Session and map that session to the original event table
SELECT t.*, map.seq_num, map.this_session_start, map.next_session_start
FROM
(SELECT sub.*, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY occurred_at) AS seq_num,
occurred_at as this_session_start,
CASE WHEN LEAD(sub.occurred_at) OVER (PARTITION BY user_id ORDER BY occurred_at) IS NULL THEN '2017-08-09 12:00:00'
ELSE LEAD(sub.occurred_at) OVER (PARTITION BY user_id ORDER BY occurred_at) END AS next_session_start
FROM
(SELECT user_id, occurred_at, (occurred_at - lag (occurred_at) OVER (PARTITION BY user_id ORDER BY occurred_at))::INTERVAL AS time_diff
FROM tutorial.yammer_events) sub
WHERE sub.time_diff> INTERVAL '1 day' OR sub.time_diff IS NULL
ORDER BY user_id) map
JOIN  tutorial.yammer_events t
ON map.user_id = t.user_id
AND t.occurred_at< map.next_session_start AND t.occurred_at >= map.this_session_start
WHERE t.user_id = 4
ORDER BY t.occurred_at


9. Calculate engagement metrics using tutorial.yammer_events
SELECT *
FROM tutorial.yammer_events

----(1) Accounting for user growth
------A. MAU active: any events
SELECT COUNT(DISTINCT user_id) as MAU, DATE_TRUNC('week', occurred_at) as week
FROM tutorial.yammer_events
GROUP BY week
ORDER BY week

------B. DAU: active: any event
SELECT DATE_TRUNC('day',occurred_at) as day, COUNT(DISTINCT user_id) as DAU
FROM tutorial.yammer_events
GROUP BY day
ORDER BY day

------C. Monthly churn rate for each day, monthly churn: active in the previous 30-60 days but not active in the previous 30 days

SELECT sub.benchmark, COUNT(CASE WHEN c.user_id IS NULL THEN sub.user_id ELSE NULL END) AS num_churned, 
COUNT(sub.user_id) AS num_active, COUNT(CASE WHEN c.user_id IS NULL THEN sub.user_id ELSE NULL END)* 100/COUNT(sub.user_id) AS churn_rate
FROM
(SELECT DISTINCT b.user_id,a.*
FROM 
(SELECT DISTINCT DATE_TRUNC('day', occurred_at) as benchmark
FROM tutorial.yammer_events) a
JOIN tutorial.yammer_events b
ON b.occurred_at >= a.benchmark - INTERVAL '2 months' AND b.occurred_at > a.benchmark - INTERVAL '1 month'
ORDER BY 2,1) sub
LEFT JOIN tutorial.yammer_events c
ON c.occurred_at >= sub.benchmark-INTERVAL '1 month' AND c.occurred_at <sub.benchmark
AND sub.user_id = c.user_id
GROUP BY sub.benchmark

-----D. Calculate the # of resurrected (active in 2 months ago, not active in 60-30 days, active in last 30 days) for each day
SELECT sub2.benchmark, COUNT(DISTINCT sub2.user_id)
FROM
      (SELECT DISTINCT sub.user_id, sub.benchmark
       FROM
          (SELECT DISTINCT b.user_id, a.benchmark
           FROM
                (SELECT DISTINCT DATE_TRUNC('day', occurred_at) AS benchmark 
                FROM tutorial.yammer_events) a
          JOIN tutorial.yammer_events b
          ON b.occurred_at < a.benchmark - INTERVAL '2 months') sub
       JOIN tutorial.yammer_events c
       ON sub.user_id = c.user_id
       AND  c.occurred_at>sub.benchmark- INTERVAL '1 month' AND c.occurred_at<sub.benchmark) sub2
LEFT JOIN tutorial.yammer_events d
ON sub2.user_id = d.user_id
AND d.occurred_at >sub2.benchmark - INTERVAL '2 months' AND d.occurred_at <sub2.benchmark - INTERVAL '1 month'
WHERE d.user_id IS NULL
GROUP BY 1

------sanity check
SELECT COUNT(sub.user_id) as num_total
FROM
(SELECT DISTINCT a.user_id
FROM
(SELECT DISTINCT user_id
FROM tutorial.yammer_events 
WHERE occurred_at < '2014-06-05') a
JOIN 
(SELECT DISTINCT user_id
FROM tutorial.yammer_events 
WHERE occurred_at > '2014-07-05' AND occurred_at< '2014-08-05') b
ON a.user_id = b.user_id) sub
LEFT JOIN 
(SELECT DISTINCT user_id
FROM tutorial.yammer_events 
WHERE occurred_at > '2014-06-05' AND occurred_at< '2014-07-05') c
ON sub.user_id = c.user_id
WHERE c.user_id IS NOT NULL

---- CALCULATE # of resurrected metrics by month
SELECT sub.month, COUNT(DISTINCT sub.user_id)
FROM
(SELECT DISTINCT b.user_id, a.month
FROM
  (SELECT DISTINCT user_id, DATE_TRUNC('month',occurred_at) AS month FROM tutorial.yammer_events) a 
  JOIN (SELECT DISTINCT user_id, DATE_TRUNC('month',occurred_at) AS month FROM tutorial.yammer_events) b
  ON b.month <  a.month-INTERVAL '1 month' AND a.user_id = b.user_id) sub
LEFT JOIN (SELECT DISTINCT user_id, DATE_TRUNC('month',occurred_at) AS month
FROM tutorial.yammer_events) c
ON sub.user_id = c.user_id
AND sub.month = c.month + INTERVAL '1 month'
WHERE c.user_id IS NULL
GROUP BY 1
ORDER BY 1

----E. Calculate # of new users for each day

SELECT first_day, COUNT(DISTINCT user_id)
FROM
(SELECT user_id, min(DATE_TRUNC('day', occurred_at)) as first_day
FROM tutorial.yammer_events
GROUP BY 1) sub
GROUP BY 1
ORDER BY 1

----F. Calculate the # of retained (active in 60-30 days and also active in 30-0 days) users for each day

SELECT sub.benchmark, COUNT(DISTINCT c.user_id)
FROM
      (SELECT DISTINCT b.user_id, a.benchmark
      FROM
            (SELECT DISTINCT DATE_TRUNC('day', occurred_at) AS benchmark
            FROM tutorial.yammer_events) a
      JOIN tutorial.yammer_events b
      ON  b.occurred_at > a.benchmark -INTERVAL '2 months'
      AND b.occurred_at < a.benchmark -INTERVAL '1 month') sub
JOIN tutorial.yammer_events c
ON sub.user_id = c.user_id AND  c.occurred_at < sub.benchmark AND  c.occurred_at> sub.benchmark - INTERVAL '1 month'
GROUP BY 1
ORDER BY 1

--Sanity check: calculate # of retained users for 8/31: active from 7/31-8/31 and active from 6/31-8/31

SELECT COUNT(DISTINCT a.user_id)
FROM 
(SELECT DISTINCT user_id
FROM tutorial.yammer_events 
WHERE occurred_at< '2014-08-31' AND occurred_at> '2014-07-31') a
JOIN 
(SELECT DISTINCT user_id
FROM tutorial.yammer_events 
WHERE occurred_at< '2014-07-31' AND occurred_at> '2014-06-30') b
ON a.user_id = b.user_id












